// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 * A memory bank of arbitrary length (a power of 2) can be built recursively
 * from smaller memory units, all the way down to the single register level.
 * This view is depicted in figure 3.6.
 * Focusing on the right-hand side of the figure, we note that a 64-register RAM
 * can be built from an array of eight 8-register RAM chips.
 * To select a particular register from the RAM64 memory, we use a 6-bit address, say xxxyyy.
 * The MSB xxx bits select one of the RAM8 chips,
 * and the LSB yyy bits select one of the registers within the selected RAM8.
 * The RAM64chip should be equipped with logic circuits that effect this hierarchical addressing scheme
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=true, sel=address[3..5], a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);

    And(a=load, b=a, out=loada);
    And(a=load, b=b, out=loadb);
    And(a=load, b=c, out=loadc);
    And(a=load, b=d, out=loadd);
    And(a=load, b=e, out=loade);
    And(a=load, b=f, out=loadf);
    And(a=load, b=g, out=loadg);
    And(a=load, b=h, out=loadh);

    RAM8(in=in, load=loada, address=address[0..2], out=outa);
    RAM8(in=in, load=loadb, address=address[0..2], out=outb);
    RAM8(in=in, load=loadc, address=address[0..2], out=outc);
    RAM8(in=in, load=loadd, address=address[0..2], out=outd);
    RAM8(in=in, load=loade, address=address[0..2], out=oute);
    RAM8(in=in, load=loadf, address=address[0..2], out=outf);
    RAM8(in=in, load=loadg, address=address[0..2], out=outg);
    RAM8(in=in, load=loadh, address=address[0..2], out=outh);

    Mux8Way16(
      a=outa,
      b=outb,
      c=outc,
      d=outd,
      e=oute,
      f=outf,
      g=outg,
      h=outh,
      sel=address[3..5],
      out=out
    );
}
