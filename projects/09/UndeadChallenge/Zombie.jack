class Zombie {
   field int x;
   field int y;

   constructor Zombie new(int xStart, int yStart) {
      let x = xStart;
      let y = yStart;
      do drawRight();
      return this;
   }

   method void dispose() {
      do eraseZombie();
      do Memory.deAlloc(this);
      return;
   }

   method int getXAxis() {
     return x;
   }

   method int getYAxis() {
     return y;
   }

   method void moveUp() {
     if (y > 0) {
       do eraseZombie();
       let y = y - 1;
     }

     do drawRunningUp();
      // do moveLegsUp();
      return;
   }

   method void moveDown() {
     if (y < 240) { // 256 - 16 (bitmap editor height)
        do eraseZombie();
        let y = y + 1;
      }
      do drawRunningDown();
      // do moveLegsDown();
      return;
   }

   method void moveLeft() {
     if (x > 0) {
       do eraseZombie();
       let x = x - 1;
     }

     do drawRunningLeft();
     // do moveLegsLeft();
     return;
   }

   method void moveRight() {
     if (x < 510) {
       do eraseZombie();
       let x = x + 1;
     }
     do drawRunningRight();
     // do moveLegsRight();
     return;
   }

   // method void moveLegsRight() {
   //    do drawRunningRight();
   //    do drawRight();
   //    return;
   // }
   //
   // method void moveLegsUp() {
   //    do drawRunningUp();
   //    do drawUp();
   //    return;
   // }
   //
   // method void moveLegsLeft() {
   //    do drawRunningLeft();
   //    do drawLeft();
   //    return;
   // }
   //
   // method void moveLegsDown() {
   //    do drawRunningDown();
   //    do drawDown();
   //    return;
   // }


   method void eraseZombie() {
      var int memAddress;
      let memAddress = 16384 + (x/16) + (y*32);
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 0);
      do Memory.poke(memAddress+128, 0);
      do Memory.poke(memAddress+160, 0);
      do Memory.poke(memAddress+192, 0);
      do Memory.poke(memAddress+224, 0);
      do Memory.poke(memAddress+256, 0);
      do Memory.poke(memAddress+288, 0);
      do Memory.poke(memAddress+320, 0);
      do Memory.poke(memAddress+352, 0);
      do Memory.poke(memAddress+384, 0);
      do Memory.poke(memAddress+416, 0);
      do Memory.poke(memAddress+448, 0);
      do Memory.poke(memAddress+480, 0);
      return;
   }

   method void drawRunningRight() {
      var int memAddress;
      let memAddress = 16384 + (x/16) + (y*32);
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 224);
      do Memory.poke(memAddress+128, 224);
      do Memory.poke(memAddress+160, 64);
      do Memory.poke(memAddress+192, 16352);
      do Memory.poke(memAddress+224, 496);
      do Memory.poke(memAddress+256, 8176);
      do Memory.poke(memAddress+288, 496);
      do Memory.poke(memAddress+320, 496);
      do Memory.poke(memAddress+352, 496);
      do Memory.poke(memAddress+384, 434);
      do Memory.poke(memAddress+416, 414);
      do Memory.poke(memAddress+448, 206);
      do Memory.poke(memAddress+480, 224);
      return;
   }


   method void drawRunningLeft() {
      var int memAddress;
      let memAddress = 16384 + (x/16) + (y*32);
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 1792);
      do Memory.poke(memAddress+128, 1792);
      do Memory.poke(memAddress+160, 512);
      do Memory.poke(memAddress+192, 2044);
      do Memory.poke(memAddress+224, 3968);
      do Memory.poke(memAddress+256, 4088);
      do Memory.poke(memAddress+288, 3968);
      do Memory.poke(memAddress+320, 3968);
      do Memory.poke(memAddress+352, 3968);
      do Memory.poke(memAddress+384, 19840);
      do Memory.poke(memAddress+416, 31104);
      do Memory.poke(memAddress+448, 29440);
      do Memory.poke(memAddress+480, 1792);
      return;
   }
   method void drawRight() {
      var int memAddress;
      let memAddress = 16384 + (x/16) + (y*32);
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 224);
      do Memory.poke(memAddress+128, 224);
      do Memory.poke(memAddress+160, 64);
      do Memory.poke(memAddress+192, 16368);
      do Memory.poke(memAddress+224, 496);
      do Memory.poke(memAddress+256, 8176);
      do Memory.poke(memAddress+288, 496);
      do Memory.poke(memAddress+320, 496);
      do Memory.poke(memAddress+352, 496);
      do Memory.poke(memAddress+384, 432);
      do Memory.poke(memAddress+416, 432);
      do Memory.poke(memAddress+448, 432);
      do Memory.poke(memAddress+480, 952);
      return;
   }

   method void drawLeft() {
    var int memAddress;
    let memAddress = 16384 + (x/16) + (y*32);
    do Memory.poke(memAddress+0, 0);
    do Memory.poke(memAddress+32, 0);
    do Memory.poke(memAddress+64, 0);
    do Memory.poke(memAddress+96, 1792);
    do Memory.poke(memAddress+128, 1792);
    do Memory.poke(memAddress+160, 512);
    do Memory.poke(memAddress+192, 4092);
    do Memory.poke(memAddress+224, 3968);
    do Memory.poke(memAddress+256, 4088);
    do Memory.poke(memAddress+288, 3968);
    do Memory.poke(memAddress+320, 3968);
    do Memory.poke(memAddress+352, 3968);
    do Memory.poke(memAddress+384, 3456);
    do Memory.poke(memAddress+416, 3456);
    do Memory.poke(memAddress+448, 3456);
    do Memory.poke(memAddress+480, 7616);
    return;
  }

   method void drawUp() {
      var int memAddress;
      let memAddress = 16384 + (x/16) + (y*32);
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 1028);
      do Memory.poke(memAddress+64, 1028);
      do Memory.poke(memAddress+96, 1252);
      do Memory.poke(memAddress+128, 1252);
      do Memory.poke(memAddress+160, 1092);
      do Memory.poke(memAddress+192, 1524);
      do Memory.poke(memAddress+224, 2044);
      do Memory.poke(memAddress+256, 496);
      do Memory.poke(memAddress+288, 496);
      do Memory.poke(memAddress+320, 496);
      do Memory.poke(memAddress+352, 496);
      do Memory.poke(memAddress+384, 432);
      do Memory.poke(memAddress+416, 432);
      do Memory.poke(memAddress+448, 432);
      do Memory.poke(memAddress+480, 952);
      return;
   }

   method void drawRunningUp() {
      var int memAddress;
      let memAddress = 16384 + (x/16) + (y*32);
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 1028);
      do Memory.poke(memAddress+64, 1028);
      do Memory.poke(memAddress+96, 1252);
      do Memory.poke(memAddress+128, 1252);
      do Memory.poke(memAddress+160, 1092);
      do Memory.poke(memAddress+192, 1524);
      do Memory.poke(memAddress+224, 2044);
      do Memory.poke(memAddress+256, 496);
      do Memory.poke(memAddress+288, 496);
      do Memory.poke(memAddress+320, 496);
      do Memory.poke(memAddress+352, 496);
      do Memory.poke(memAddress+384, 432);
      do Memory.poke(memAddress+416, 432);
      do Memory.poke(memAddress+448, 952);
      do Memory.poke(memAddress+480, 0);
      return;
   }

   method void drawDown() {
      var int memAddress;
      let memAddress = 16384 + (x/16) + (y*32);
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 224);
      do Memory.poke(memAddress+128, 224);
      do Memory.poke(memAddress+160, 64);
      do Memory.poke(memAddress+192, 496);
      do Memory.poke(memAddress+224, 4094);
      do Memory.poke(memAddress+256, 2546);
      do Memory.poke(memAddress+288, 2546);
      do Memory.poke(memAddress+320, 2546);
      do Memory.poke(memAddress+352, 2546);
      do Memory.poke(memAddress+384, 2482);
      do Memory.poke(memAddress+416, 432);
      do Memory.poke(memAddress+448, 432);
      do Memory.poke(memAddress+480, 952);
      return;
   }


   method void drawRunningDown() {
      var int memAddress;
      let memAddress = 16384 + (x/16) + (y*32);
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 224);
      do Memory.poke(memAddress+128, 224);
      do Memory.poke(memAddress+160, 64);
      do Memory.poke(memAddress+192, 496);
      do Memory.poke(memAddress+224, 4094);
      do Memory.poke(memAddress+256, 2546);
      do Memory.poke(memAddress+288, 2546);
      do Memory.poke(memAddress+320, 2546);
      do Memory.poke(memAddress+352, 2546);
      do Memory.poke(memAddress+384, 2482);
      do Memory.poke(memAddress+416, 432);
      do Memory.poke(memAddress+448, 952);
      do Memory.poke(memAddress+480, 0);
      return;
   }
}
