class Zombie {
   field int location;
   field int xAxis;
   field int yAxis;

   constructor Zombie new() {
      let location = 0;
      let xAxis = 0; // 1 line * 32 pixels per line
      let yAxis = 0; // Screen has 256 lines
      do drawRight(location);
      return this;
   }

   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   method void moveUp() {
     if (yAxis > 0) {
       do eraseZombie(location);
       let location = location - 64; // 2 (lines) * 32 (pixels per line)
       let yAxis = yAxis - 2; // same as line above : 2 lines
     }

      do moveLegsUp();
      return;
   }

   method void moveDown() {
     if (yAxis < 240) { // 256 - 16 (bitmap editor height)
        do eraseZombie(location);
        let location = location + 64; // 2 (lines) * 32 (pixels per line)
        let yAxis = yAxis + 2; // same as line above : 2 lines
      }
      do moveLegsDown();
      return;
   }

   method void moveLeft() {
     if (xAxis > 0) {
       do eraseZombie(location);
       let location = location - 1;
       let xAxis = xAxis - 1;
     }

     do moveLegsLeft();
     return;
   }

   method void moveRight() {
     if (xAxis < 31) {
       do eraseZombie(location);
       let location = location + 1;
       let xAxis = xAxis + 1;
     }
     do moveLegsRight();
     return;
   }

   method void moveLegsRight() {
      do drawRunningRight(location);
      do Sys.wait(200);
      do drawRight(location);
      do Sys.wait(200);
      return;
   }

   method void moveLegsUp() {
      do drawRunningUp(location);
      do Sys.wait(200);
      do drawUp(location);
      do Sys.wait(200);
      return;
   }

   method void moveLegsLeft() {
      do drawRunningLeft(location);
      do Sys.wait(200);
      do drawLeft(location);
      do Sys.wait(200);
      return;
   }

   method void moveLegsDown() {
      do drawRunningDown(location);
      do Sys.wait(200);
      do drawDown(location);
      do Sys.wait(200);
      return;
   }


   method void eraseZombie(int location) {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 0);
      do Memory.poke(memAddress+128, 0);
      do Memory.poke(memAddress+160, 0);
      do Memory.poke(memAddress+192, 0);
      do Memory.poke(memAddress+224, 0);
      do Memory.poke(memAddress+256, 0);
      do Memory.poke(memAddress+288, 0);
      do Memory.poke(memAddress+320, 0);
      do Memory.poke(memAddress+352, 0);
      do Memory.poke(memAddress+384, 0);
      do Memory.poke(memAddress+416, 0);
      do Memory.poke(memAddress+448, 0);
      do Memory.poke(memAddress+480, 0);
      return;
   }

   method void drawRunningRight(int location) {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 224);
      do Memory.poke(memAddress+128, 224);
      do Memory.poke(memAddress+160, 64);
      do Memory.poke(memAddress+192, 16352);
      do Memory.poke(memAddress+224, 496);
      do Memory.poke(memAddress+256, 8176);
      do Memory.poke(memAddress+288, 496);
      do Memory.poke(memAddress+320, 496);
      do Memory.poke(memAddress+352, 496);
      do Memory.poke(memAddress+384, 434);
      do Memory.poke(memAddress+416, 414);
      do Memory.poke(memAddress+448, 206);
      do Memory.poke(memAddress+480, 224);
      return;
   }


   method void drawRunningLeft(int location) {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 1792);
      do Memory.poke(memAddress+128, 1792);
      do Memory.poke(memAddress+160, 512);
      do Memory.poke(memAddress+192, 2044);
      do Memory.poke(memAddress+224, 3968);
      do Memory.poke(memAddress+256, 4088);
      do Memory.poke(memAddress+288, 3968);
      do Memory.poke(memAddress+320, 3968);
      do Memory.poke(memAddress+352, 3968);
      do Memory.poke(memAddress+384, 19840);
      do Memory.poke(memAddress+416, 31104);
      do Memory.poke(memAddress+448, 29440);
      do Memory.poke(memAddress+480, 1792);
      return;
   }
   method void drawRight(int location) {
      var int memAddress;
     	let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 224);
      do Memory.poke(memAddress+128, 224);
      do Memory.poke(memAddress+160, 64);
      do Memory.poke(memAddress+192, 16368);
      do Memory.poke(memAddress+224, 496);
      do Memory.poke(memAddress+256, 8176);
      do Memory.poke(memAddress+288, 496);
      do Memory.poke(memAddress+320, 496);
      do Memory.poke(memAddress+352, 496);
      do Memory.poke(memAddress+384, 432);
      do Memory.poke(memAddress+416, 432);
      do Memory.poke(memAddress+448, 432);
      do Memory.poke(memAddress+480, 952);
      return;
   }

   method void drawLeft(int location) {
    var int memAddress;
    let memAddress = 16384+location;
    do Memory.poke(memAddress+0, 0);
    do Memory.poke(memAddress+32, 0);
    do Memory.poke(memAddress+64, 0);
    do Memory.poke(memAddress+96, 1792);
    do Memory.poke(memAddress+128, 1792);
    do Memory.poke(memAddress+160, 512);
    do Memory.poke(memAddress+192, 4092);
    do Memory.poke(memAddress+224, 3968);
    do Memory.poke(memAddress+256, 4088);
    do Memory.poke(memAddress+288, 3968);
    do Memory.poke(memAddress+320, 3968);
    do Memory.poke(memAddress+352, 3968);
    do Memory.poke(memAddress+384, 3456);
    do Memory.poke(memAddress+416, 3456);
    do Memory.poke(memAddress+448, 3456);
    do Memory.poke(memAddress+480, 7616);
    return;
  }

   method void drawUp(int location) {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 1028);
      do Memory.poke(memAddress+64, 1028);
      do Memory.poke(memAddress+96, 1252);
      do Memory.poke(memAddress+128, 1252);
      do Memory.poke(memAddress+160, 1092);
      do Memory.poke(memAddress+192, 1524);
      do Memory.poke(memAddress+224, 2044);
      do Memory.poke(memAddress+256, 496);
      do Memory.poke(memAddress+288, 496);
      do Memory.poke(memAddress+320, 496);
      do Memory.poke(memAddress+352, 496);
      do Memory.poke(memAddress+384, 432);
      do Memory.poke(memAddress+416, 432);
      do Memory.poke(memAddress+448, 432);
      do Memory.poke(memAddress+480, 952);
      return;
   }

   method void drawRunningUp(int location) {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 1028);
      do Memory.poke(memAddress+64, 1028);
      do Memory.poke(memAddress+96, 1252);
      do Memory.poke(memAddress+128, 1252);
      do Memory.poke(memAddress+160, 1092);
      do Memory.poke(memAddress+192, 1524);
      do Memory.poke(memAddress+224, 2044);
      do Memory.poke(memAddress+256, 496);
      do Memory.poke(memAddress+288, 496);
      do Memory.poke(memAddress+320, 496);
      do Memory.poke(memAddress+352, 496);
      do Memory.poke(memAddress+384, 432);
      do Memory.poke(memAddress+416, 432);
      do Memory.poke(memAddress+448, 952);
      do Memory.poke(memAddress+480, 0);
      return;
   }

   method void drawDown(int location) {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 224);
      do Memory.poke(memAddress+128, 224);
      do Memory.poke(memAddress+160, 64);
      do Memory.poke(memAddress+192, 496);
      do Memory.poke(memAddress+224, 4094);
      do Memory.poke(memAddress+256, 2546);
      do Memory.poke(memAddress+288, 2546);
      do Memory.poke(memAddress+320, 2546);
      do Memory.poke(memAddress+352, 2546);
      do Memory.poke(memAddress+384, 2482);
      do Memory.poke(memAddress+416, 432);
      do Memory.poke(memAddress+448, 432);
      do Memory.poke(memAddress+480, 952);
      return;
   }


   method void drawRunningDown(int location) {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 224);
      do Memory.poke(memAddress+128, 224);
      do Memory.poke(memAddress+160, 64);
      do Memory.poke(memAddress+192, 496);
      do Memory.poke(memAddress+224, 4094);
      do Memory.poke(memAddress+256, 2546);
      do Memory.poke(memAddress+288, 2546);
      do Memory.poke(memAddress+320, 2546);
      do Memory.poke(memAddress+352, 2546);
      do Memory.poke(memAddress+384, 2482);
      do Memory.poke(memAddress+416, 432);
      do Memory.poke(memAddress+448, 952);
      do Memory.poke(memAddress+480, 0);
      return;
   }
}
