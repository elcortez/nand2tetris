class Hero {
   field int life; // remaining life points of the hero
   field int location;

   constructor Hero new() {
      let location = 4080; // starting point
      do drawRight(location);
      return this;
   }

   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   method void moveUp() {
      do eraseHero(location);
      let location = location - 64;
      do moveLegsRight();
      return;
   }

   method void moveDown() {
      do eraseHero(location);
      let location = location + 64;
      do moveLegsLeft();
      return;
   }

   method void moveLeft() {
      do eraseHero(location);
      let location = location - 1;
      do moveLegsLeft();
      return;
   }

   method void moveRight() {
      do eraseHero(location);
      let location = location + 1;
      do moveLegsRight();
      return;
   }

   method void moveLegsRight() {
      do drawRunningRight(location);
      do Sys.wait(50);
      do drawRight(location);
      do Sys.wait(50);
      return;
   }

   method void moveLegsLeft() {
      do drawRunningLeft(location);
      do Sys.wait(50);
      do drawLeft(location);
      do Sys.wait(50);
      return;
   }

   method void eraseHero(int location) {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 0);
      do Memory.poke(memAddress+128, 0);
      do Memory.poke(memAddress+160, 0);
      do Memory.poke(memAddress+192, 0);
      do Memory.poke(memAddress+224, 0);
      do Memory.poke(memAddress+256, 0);
      do Memory.poke(memAddress+288, 0);
      do Memory.poke(memAddress+320, 0);
      do Memory.poke(memAddress+352, 0);
      do Memory.poke(memAddress+384, 0);
      do Memory.poke(memAddress+416, 0);
      do Memory.poke(memAddress+448, 0);
      do Memory.poke(memAddress+480, 0);
      return;
   }

   method void drawRunningRight(int location) {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 0);
      do Memory.poke(memAddress+128, 480);
      do Memory.poke(memAddress+160, 7648);
      do Memory.poke(memAddress+192, 15552);
      do Memory.poke(memAddress+224, 8188);
      do Memory.poke(memAddress+256, 192);
      do Memory.poke(memAddress+288, 192);
      do Memory.poke(memAddress+320, 192);
      do Memory.poke(memAddress+352, 192);
      do Memory.poke(memAddress+384, 508);
      do Memory.poke(memAddress+416, 796);
      do Memory.poke(memAddress+448, 1804);
      do Memory.poke(memAddress+480, 1792);
      return;
   }


   method void drawRunningLeft(int location) {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 0);
      do Memory.poke(memAddress+128, 1920);
      do Memory.poke(memAddress+160, 1976);
      do Memory.poke(memAddress+192, 828);
      do Memory.poke(memAddress+224, 16376);
      do Memory.poke(memAddress+256, 768);
      do Memory.poke(memAddress+288, 768);
      do Memory.poke(memAddress+320, 768);
      do Memory.poke(memAddress+352, 768);
      do Memory.poke(memAddress+384, 16256);
      do Memory.poke(memAddress+416, 14528);
      do Memory.poke(memAddress+448, 12512);
      do Memory.poke(memAddress+480, 224);
      return;
   }
   method void drawRight(int location) {
      var int memAddress;
   	let memAddress = 16384+location;
   	do Memory.poke(memAddress+0, 0);
   	do Memory.poke(memAddress+32, 0);
   	do Memory.poke(memAddress+64, 0);
   	do Memory.poke(memAddress+96, 0);
   	do Memory.poke(memAddress+128, 0);
   	do Memory.poke(memAddress+160, 0);
   	do Memory.poke(memAddress+192, 448);
   	do Memory.poke(memAddress+224, 7616);
   	do Memory.poke(memAddress+256, 15504);
   	do Memory.poke(memAddress+288, 4080);
   	do Memory.poke(memAddress+320, 448);
   	do Memory.poke(memAddress+352, 448);
   	do Memory.poke(memAddress+384, 448);
   	do Memory.poke(memAddress+416, 864);
   	do Memory.poke(memAddress+448, 864);
   	do Memory.poke(memAddress+480, 1904);
   	return;
   }

   method void drawLeft(int location) {
    var int memAddress;
    let memAddress = 16384+location;
    do Memory.poke(memAddress+0, 0);
    do Memory.poke(memAddress+32, 0);
    do Memory.poke(memAddress+64, 0);
    do Memory.poke(memAddress+96, 0);
    do Memory.poke(memAddress+128, 0);
    do Memory.poke(memAddress+160, 0);
    do Memory.poke(memAddress+192, 896);
    do Memory.poke(memAddress+224, 952);
    do Memory.poke(memAddress+256, 2364);
    do Memory.poke(memAddress+288, 4080);
    do Memory.poke(memAddress+320, 896);
    do Memory.poke(memAddress+352, 896);
    do Memory.poke(memAddress+384, 896);
    do Memory.poke(memAddress+416, 1728);
    do Memory.poke(memAddress+448, 1728);
    do Memory.poke(memAddress+480, 3808);
    return;
  }
}
