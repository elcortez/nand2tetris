class Hero {
   field int location;
   field int xAxis;
   field int yAxis;

   constructor Hero new() {
      let location = 4112; // 4112 = middle of the screen = (128 (lines) * 32 (blocs of 16 pixels)) + 16 (pixels per line / 2)
      let xAxis = 16; // 1 line * 32 pixels per line : 4112 is the middle of the screen
      let yAxis = 128; // Screen has 256 lines : 4112 is the middle of the screen
      do drawRight(location);
      return this;
   }

   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   method int getXAxis() {
     return xAxis;
   }

   method int getYAxis() {
     return yAxis;
   }

   method void moveUp() {
     if (yAxis > 0) {
       do eraseHero(location);
       let location = location - 64; // 2 (lines) * 32 (blocs of 16 pixels per line)
       let yAxis = yAxis - 2; // same as line above : 2 lines
     }

      do moveLegsUp();
      return;
   }

   method void moveDown() {
     if (yAxis < 240) { // 256 - 16 (bitmap editor height)
        do eraseHero(location);
        let location = location + 64; // 2 (lines) * 32 (blocs of 16 pixels per line)
        let yAxis = yAxis + 2; // same as line above : 2 lines
      }
      do moveLegsDown();
      return;
   }

   method void moveLeft() {
    if (xAxis > 0) {
      do eraseHero(location);
      let location = location - 1;
      let xAxis = xAxis - 1;
    }

    do moveLegsLeft();
    return;
   }

   method void moveRight() {
      if (xAxis < 31) {
         do eraseHero(location);
         let location = location + 1;
         let xAxis = xAxis + 1;
      }
      do moveLegsRight();
      return;
   }

   method void moveLegsRight() {
      do drawRunningRight(location);
      do drawRight(location);
      return;
   }

   method void moveLegsUp() {
      do drawRunningUp(location);
      do drawUp(location);
      return;
   }

   method void moveLegsLeft() {
      do drawRunningLeft(location);
      do drawLeft(location);
      return;
   }

   method void moveLegsDown() {
      do drawRunningDown(location);
      do drawDown(location);
      return;
   }


   method void eraseHero(int location) {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 0);
      do Memory.poke(memAddress+128, 0);
      do Memory.poke(memAddress+160, 0);
      do Memory.poke(memAddress+192, 0);
      do Memory.poke(memAddress+224, 0);
      do Memory.poke(memAddress+256, 0);
      do Memory.poke(memAddress+288, 0);
      do Memory.poke(memAddress+320, 0);
      do Memory.poke(memAddress+352, 0);
      do Memory.poke(memAddress+384, 0);
      do Memory.poke(memAddress+416, 0);
      do Memory.poke(memAddress+448, 0);
      do Memory.poke(memAddress+480, 0);
      return;
   }

   method void drawRunningRight(int location) {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 0);
      do Memory.poke(memAddress+128, 480);
      do Memory.poke(memAddress+160, 7648);
      do Memory.poke(memAddress+192, 15552);
      do Memory.poke(memAddress+224, 8188);
      do Memory.poke(memAddress+256, 192);
      do Memory.poke(memAddress+288, 192);
      do Memory.poke(memAddress+320, 192);
      do Memory.poke(memAddress+352, 192);
      do Memory.poke(memAddress+384, 508);
      do Memory.poke(memAddress+416, 796);
      do Memory.poke(memAddress+448, 1804);
      do Memory.poke(memAddress+480, 1792);
      return;
   }


   method void drawRunningLeft(int location) {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 0);
      do Memory.poke(memAddress+128, 1920);
      do Memory.poke(memAddress+160, 1976);
      do Memory.poke(memAddress+192, 828);
      do Memory.poke(memAddress+224, 16376);
      do Memory.poke(memAddress+256, 768);
      do Memory.poke(memAddress+288, 768);
      do Memory.poke(memAddress+320, 768);
      do Memory.poke(memAddress+352, 768);
      do Memory.poke(memAddress+384, 16256);
      do Memory.poke(memAddress+416, 14528);
      do Memory.poke(memAddress+448, 12512);
      do Memory.poke(memAddress+480, 224);
      return;
   }
   method void drawRight(int location) {
      var int memAddress;
   	let memAddress = 16384+location;
   	do Memory.poke(memAddress+0, 0);
   	do Memory.poke(memAddress+32, 0);
   	do Memory.poke(memAddress+64, 0);
   	do Memory.poke(memAddress+96, 0);
   	do Memory.poke(memAddress+128, 0);
   	do Memory.poke(memAddress+160, 0);
   	do Memory.poke(memAddress+192, 448);
   	do Memory.poke(memAddress+224, 7616);
   	do Memory.poke(memAddress+256, 15504);
   	do Memory.poke(memAddress+288, 4080);
   	do Memory.poke(memAddress+320, 448);
   	do Memory.poke(memAddress+352, 448);
   	do Memory.poke(memAddress+384, 448);
   	do Memory.poke(memAddress+416, 864);
   	do Memory.poke(memAddress+448, 864);
   	do Memory.poke(memAddress+480, 1904);
   	return;
   }

   method void drawLeft(int location) {
    var int memAddress;
    let memAddress = 16384+location;
    do Memory.poke(memAddress+0, 0);
    do Memory.poke(memAddress+32, 0);
    do Memory.poke(memAddress+64, 0);
    do Memory.poke(memAddress+96, 0);
    do Memory.poke(memAddress+128, 0);
    do Memory.poke(memAddress+160, 0);
    do Memory.poke(memAddress+192, 896);
    do Memory.poke(memAddress+224, 952);
    do Memory.poke(memAddress+256, 2364);
    do Memory.poke(memAddress+288, 4080);
    do Memory.poke(memAddress+320, 896);
    do Memory.poke(memAddress+352, 896);
    do Memory.poke(memAddress+384, 896);
    do Memory.poke(memAddress+416, 1728);
    do Memory.poke(memAddress+448, 1728);
    do Memory.poke(memAddress+480, 3808);
    return;
  }

   method void drawUp(int location) {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 32);
      do Memory.poke(memAddress+128, 48);
      do Memory.poke(memAddress+160, 48);
      do Memory.poke(memAddress+192, 464);
      do Memory.poke(memAddress+224, 464);
      do Memory.poke(memAddress+256, 144);
      do Memory.poke(memAddress+288, 1008);
      do Memory.poke(memAddress+320, 736);
      do Memory.poke(memAddress+352, 736);
      do Memory.poke(memAddress+384, 224);
      do Memory.poke(memAddress+416, 496);
      do Memory.poke(memAddress+448, 432);
      do Memory.poke(memAddress+480, 952);
      return;
   }

   method void drawRunningUp(int location) {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 32);
      do Memory.poke(memAddress+128, 48);
      do Memory.poke(memAddress+160, 48);
      do Memory.poke(memAddress+192, 464);
      do Memory.poke(memAddress+224, 464);
      do Memory.poke(memAddress+256, 144);
      do Memory.poke(memAddress+288, 4080);
      do Memory.poke(memAddress+320, 224);
      do Memory.poke(memAddress+352, 224);
      do Memory.poke(memAddress+384, 736);
      do Memory.poke(memAddress+416, 1008);
      do Memory.poke(memAddress+448, 944);
      do Memory.poke(memAddress+480, 56);
      return;
   }

   method void drawDown(int location) {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 2496);
      do Memory.poke(memAddress+128, 2496);
      do Memory.poke(memAddress+160, 2176);
      do Memory.poke(memAddress+192, 4088);
      do Memory.poke(memAddress+224, 460);
      do Memory.poke(memAddress+256, 460);
      do Memory.poke(memAddress+288, 460);
      do Memory.poke(memAddress+320, 460);
      do Memory.poke(memAddress+352, 1000);
      do Memory.poke(memAddress+384, 864);
      do Memory.poke(memAddress+416, 864);
      do Memory.poke(memAddress+448, 864);
      do Memory.poke(memAddress+480, 1904);
      return;
   }


   method void drawRunningDown(int location) {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 2496);
      do Memory.poke(memAddress+128, 2496);
      do Memory.poke(memAddress+160, 2176);
      do Memory.poke(memAddress+192, 4088);
      do Memory.poke(memAddress+224, 460);
      do Memory.poke(memAddress+256, 460);
      do Memory.poke(memAddress+288, 460);
      do Memory.poke(memAddress+320, 2508);
      do Memory.poke(memAddress+352, 4072);
      do Memory.poke(memAddress+384, 3936);
      do Memory.poke(memAddress+416, 96);
      do Memory.poke(memAddress+448, 224);
      do Memory.poke(memAddress+480, 128);
      return;
   }
}
