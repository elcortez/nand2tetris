class Hero {
   field int x;
   field int y;

   constructor Hero new() {
      let x = 255;
      let y = 128;
      do drawRight();
      return this;
   }

   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   method int getXAxis() {
     return x;
   }

   method int getYAxis() {
     return y;
   }

   method void moveUp() {
     if (y > 0) {
       do eraseHero();
       let y = y - 1;
     }

     // do drawRunningUp();
      do moveLegsUp();
      return;
   }

   method void moveDown() {
     if (y < 240) { // 256 - 16 (bitmap editor height)
        do eraseHero();
        let y = y + 1;
      }
      // do drawRunningDown();
      do moveLegsDown();
      return;
   }

   method void moveLeft() {
    if (x > 0) {
      do eraseHero();
      let x = x - 1;
    }

    // do drawRunningLeft();
    do moveLegsLeft();
    return;
   }

   method void moveRight() {
      if (x < 510) {
         do eraseHero();
         let x = x + 1;
      }
      // do drawRunningRight();
      do moveLegsRight();
      return;
   }

   method void moveLegsRight() {
      do drawRunningRight();
      do drawRight();
      return;
   }

   method void moveLegsUp() {
      do drawRunningUp();
      do drawUp();
      return;
   }

   method void moveLegsLeft() {
      do drawRunningLeft();
      do drawLeft();
      return;
   }

   method void moveLegsDown() {
      do drawRunningDown();
      do drawDown();
      return;
   }


   method void eraseHero() {
      var int memAddress;
      let memAddress = 16384 + (x/16) + (y*32);
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 0);
      do Memory.poke(memAddress+128, 0);
      do Memory.poke(memAddress+160, 0);
      do Memory.poke(memAddress+192, 0);
      do Memory.poke(memAddress+224, 0);
      do Memory.poke(memAddress+256, 0);
      do Memory.poke(memAddress+288, 0);
      do Memory.poke(memAddress+320, 0);
      do Memory.poke(memAddress+352, 0);
      do Memory.poke(memAddress+384, 0);
      do Memory.poke(memAddress+416, 0);
      do Memory.poke(memAddress+448, 0);
      do Memory.poke(memAddress+480, 0);
      return;
   }

   method void drawRunningRight() {
      var int memAddress;
      let memAddress = 16384 + (x/16) + (y*32);
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 0);
      do Memory.poke(memAddress+128, 480);
      do Memory.poke(memAddress+160, 7648);
      do Memory.poke(memAddress+192, 15552);
      do Memory.poke(memAddress+224, 8188);
      do Memory.poke(memAddress+256, 192);
      do Memory.poke(memAddress+288, 192);
      do Memory.poke(memAddress+320, 192);
      do Memory.poke(memAddress+352, 192);
      do Memory.poke(memAddress+384, 508);
      do Memory.poke(memAddress+416, 796);
      do Memory.poke(memAddress+448, 1804);
      do Memory.poke(memAddress+480, 1792);
      return;
   }


   method void drawRunningLeft() {
      var int memAddress;
      let memAddress = 16384 + (x/16) + (y*32);
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 0);
      do Memory.poke(memAddress+128, 1920);
      do Memory.poke(memAddress+160, 1976);
      do Memory.poke(memAddress+192, 828);
      do Memory.poke(memAddress+224, 16376);
      do Memory.poke(memAddress+256, 768);
      do Memory.poke(memAddress+288, 768);
      do Memory.poke(memAddress+320, 768);
      do Memory.poke(memAddress+352, 768);
      do Memory.poke(memAddress+384, 16256);
      do Memory.poke(memAddress+416, 14528);
      do Memory.poke(memAddress+448, 12512);
      do Memory.poke(memAddress+480, 224);
      return;
   }

   method void drawRight() {
    var int memAddress;
    let memAddress = 16384 + (x/16) + (y*32);
   	do Memory.poke(memAddress+0, 0);
   	do Memory.poke(memAddress+32, 0);
   	do Memory.poke(memAddress+64, 0);
   	do Memory.poke(memAddress+96, 0);
   	do Memory.poke(memAddress+128, 0);
   	do Memory.poke(memAddress+160, 0);
   	do Memory.poke(memAddress+192, 448);
   	do Memory.poke(memAddress+224, 7616);
   	do Memory.poke(memAddress+256, 15504);
   	do Memory.poke(memAddress+288, 4080);
   	do Memory.poke(memAddress+320, 448);
   	do Memory.poke(memAddress+352, 448);
   	do Memory.poke(memAddress+384, 448);
   	do Memory.poke(memAddress+416, 864);
   	do Memory.poke(memAddress+448, 864);
   	do Memory.poke(memAddress+480, 1904);
   	return;
   }

   method void drawLeft() {
    var int memAddress;
    let memAddress = 16384 + (x/16) + (y*32);
    do Memory.poke(memAddress+0, 0);
    do Memory.poke(memAddress+32, 0);
    do Memory.poke(memAddress+64, 0);
    do Memory.poke(memAddress+96, 0);
    do Memory.poke(memAddress+128, 0);
    do Memory.poke(memAddress+160, 0);
    do Memory.poke(memAddress+192, 896);
    do Memory.poke(memAddress+224, 952);
    do Memory.poke(memAddress+256, 2364);
    do Memory.poke(memAddress+288, 4080);
    do Memory.poke(memAddress+320, 896);
    do Memory.poke(memAddress+352, 896);
    do Memory.poke(memAddress+384, 896);
    do Memory.poke(memAddress+416, 1728);
    do Memory.poke(memAddress+448, 1728);
    do Memory.poke(memAddress+480, 3808);
    return;
  }

   method void drawUp() {
      var int memAddress;
      let memAddress = 16384 + (x/16) + (y*32);
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 32);
      do Memory.poke(memAddress+128, 48);
      do Memory.poke(memAddress+160, 48);
      do Memory.poke(memAddress+192, 464);
      do Memory.poke(memAddress+224, 464);
      do Memory.poke(memAddress+256, 144);
      do Memory.poke(memAddress+288, 1008);
      do Memory.poke(memAddress+320, 736);
      do Memory.poke(memAddress+352, 736);
      do Memory.poke(memAddress+384, 224);
      do Memory.poke(memAddress+416, 496);
      do Memory.poke(memAddress+448, 432);
      do Memory.poke(memAddress+480, 952);
      return;
   }

   method void drawRunningUp() {
      var int memAddress;
      let memAddress = 16384 + (x/16) + (y*32);
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 32);
      do Memory.poke(memAddress+128, 48);
      do Memory.poke(memAddress+160, 48);
      do Memory.poke(memAddress+192, 464);
      do Memory.poke(memAddress+224, 464);
      do Memory.poke(memAddress+256, 144);
      do Memory.poke(memAddress+288, 4080);
      do Memory.poke(memAddress+320, 224);
      do Memory.poke(memAddress+352, 224);
      do Memory.poke(memAddress+384, 736);
      do Memory.poke(memAddress+416, 1008);
      do Memory.poke(memAddress+448, 944);
      do Memory.poke(memAddress+480, 56);
      return;
   }

   method void drawDown() {
      var int memAddress;
      let memAddress = 16384 + (x/16) + (y*32);
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 2496);
      do Memory.poke(memAddress+128, 2496);
      do Memory.poke(memAddress+160, 2176);
      do Memory.poke(memAddress+192, 4088);
      do Memory.poke(memAddress+224, 460);
      do Memory.poke(memAddress+256, 460);
      do Memory.poke(memAddress+288, 460);
      do Memory.poke(memAddress+320, 460);
      do Memory.poke(memAddress+352, 1000);
      do Memory.poke(memAddress+384, 864);
      do Memory.poke(memAddress+416, 864);
      do Memory.poke(memAddress+448, 864);
      do Memory.poke(memAddress+480, 1904);
      return;
   }


   method void drawRunningDown() {
      var int memAddress;
      let memAddress = 16384 + (x/16) + (y*32);
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 2496);
      do Memory.poke(memAddress+128, 2496);
      do Memory.poke(memAddress+160, 2176);
      do Memory.poke(memAddress+192, 4088);
      do Memory.poke(memAddress+224, 460);
      do Memory.poke(memAddress+256, 460);
      do Memory.poke(memAddress+288, 460);
      do Memory.poke(memAddress+320, 2508);
      do Memory.poke(memAddress+352, 4072);
      do Memory.poke(memAddress+384, 3936);
      do Memory.poke(memAddress+416, 96);
      do Memory.poke(memAddress+448, 224);
      do Memory.poke(memAddress+480, 128);
      return;
   }
}
