// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {
  IN  inM[16],         // M value input  (M = contents of RAM[A])
      instruction[16], // Instruction for execution
      reset;           // Signals whether to re-start the current
                       // program (reset==1) or continue executing
                       // the current program (reset==0).

  OUT outM[16],        // M value output
      writeM,          // Write to M?
      addressM[15],    // Address in data memory (of M)
      pc[15];          // address of next instruction

  PARTS:
  And(a=instruction[0], b=instruction[0], out=j3);
  And(a=instruction[1], b=instruction[1], out=j2);
  And(a=instruction[2], b=instruction[2], out=j1);
  And(a=instruction[3], b=instruction[3], out=d3);
  And(a=instruction[4], b=instruction[4], out=d2);
  And(a=instruction[5], b=instruction[5], out=d1);
  And(a=instruction[6], b=instruction[6], out=c6);
  And(a=instruction[7], b=instruction[7], out=c5);
  And(a=instruction[8], b=instruction[8], out=c4);
  And(a=instruction[9], b=instruction[9], out=c3);
  And(a=instruction[10], b=instruction[10], out=c2);
  And(a=instruction[11], b=instruction[11], out=c1);
  And(a=instruction[12], b=instruction[12], out=a);
  And(a=instruction[15], b=instruction[15], out=cInstructionType);

  Mux16(a[15]=false, a[0..14]=instruction[0..14], b=outALU, sel=cInstructionType, out=mux1);

  ARegister(in=mux1, load=d1, out=RegisterA, out[0..14]=addressM);
  DRegister(in=outALU, load=d2, out=RegisterD);
  And(a=cInstructionType, b=d3, out=writeM);

  Mux16(a=RegisterA, b=inM, sel=a, out=mux2);

  ALU(
    x=RegisterD,
    y=mux2,
    zx=c1,
    nx=c2,
    zy=c3,
    ny=c4,
    f=c5,
    no=c6,
    out=outM,
    out=outALU,
    zr=zr,
    ng=ng
  );


  Not(in=j1, out=notj1);
  Not(in=j2, out=notj2);
  Not(in=j3, out=notj3);

  And(a=j1, b=j2, out=j12);
  And(a=j1, b=j3, out=j13);
  And(a=j2, b=j3, out=j23);

  And(a=notj1, b=notj2, out=notj12);
  And(a=notj1, b=notj3, out=notj13);
  And(a=notj2, b=notj3, out=notj23);

  And(a=j1, b=notj23, out=jgt);
  And(a=j2, b=notj13, out=jeq);
  And(a=j3, b=notj23, out=jlt);
  And(a=j12, b=notj3, out=jle);
  And(a=j13, b=notj2, out=jne);
  And(a=j23, b=notj1, out=jge);
  And(a=j12, b=j3, out=jmp);

  Not(in=zr, out=notZero);
  Not(in=ng, out=positive);
  Or(a=notZero, b=positive, out=greaterOrEqual);
  Or(a=notZero, b=ng, out=lowerOrEqual);

  And(a=zr, b=jeq, out=jeqCheck);
  And(a=notZero, b=jne, out=jneCheck);
  And(a=ng, b=jlt, out=jltCheck);
  And(a=positive, b=jgt, out= jgtCheck);
  And(a=greaterOrEqual, b=jge, out=jgeCheck);
  And(a=lowerOrEqual, b=jle, out=jleCheck);

  Or8Way(
    in[0]=jeqCheck,
    in[1]=jneCheck,
    in[2]=jltCheck,
    in[3]=jgtCheck,
    in[4]=jgeCheck,
    in[5]=jleCheck,
    in[6]=jmp,
    in[7]=false,
    out=load
  );

  Not(in=load, out=inc);
  PC(reset=reset, load=load, inc=inc, in=RegisterA, out[0..14]=pc);
}
