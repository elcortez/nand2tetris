<class>
  <keyword> class </keyword>
  <identifier> SquareGame </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <identifier> Square </identifier>
    <identifier> square </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> direction </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <identifier> SquareGame </identifier>
    <identifier> new </identifier>
    <symbol> ( </symbol>
    <symbol> ) </symbol>
    <symbol> { </symbol>
    <letStatement>
      <keyword> let </keyword>
      <identifier> square </identifier>
      <symbol> = </symbol>
      <identifier> square </identifier>
      <symbol> ; </symbol>
    </letStatement>
    <letStatement>
      <keyword> let </keyword>
      <identifier> direction </identifier>
      <symbol> = </symbol>
      <identifier> direction </identifier>
      <symbol> ; </symbol>
    </letStatement>
    <returnStatement>
      <keyword> return </keyword>
      <identifier> square </identifier>
      <symbol> ; </symbol>
    </returnStatement>
    <symbol> } </symbol>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> dispose </identifier>
    <symbol> ( </symbol>
    <symbol> ) </symbol>
    <symbol> { </symbol>
    <doStatement>
      <keyword> do </keyword>
      <identifier> square </identifier>
      <symbol> . </symbol>
      <identifier> dispose </identifier>
      <symbol> ( </symbol>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <doStatement>
      <keyword> do </keyword>
      <identifier> Memory </identifier>
      <symbol> . </symbol>
      <identifier> deAlloc </identifier>
      <symbol> ( </symbol>
      <identifier> square </identifier>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
    <symbol> } </symbol>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> moveSquare </identifier>
    <symbol> ( </symbol>
    <symbol> ) </symbol>
    <symbol> { </symbol>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
      <identifier> direction </identifier>
      <symbol> ) </symbol>
      <symbol> { </symbol>
      <doStatement>
        <keyword> do </keyword>
        <identifier> square </identifier>
        <symbol> . </symbol>
        <identifier> moveUp </identifier>
        <symbol> ( </symbol>
        <symbol> ) </symbol>
        <symbol> ; </symbol>
      </doStatement>
      <symbol> } </symbol>
    </ifStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
      <identifier> direction </identifier>
      <symbol> ) </symbol>
      <symbol> { </symbol>
      <doStatement>
        <keyword> do </keyword>
        <identifier> square </identifier>
        <symbol> . </symbol>
        <identifier> moveDown </identifier>
        <symbol> ( </symbol>
        <symbol> ) </symbol>
        <symbol> ; </symbol>
      </doStatement>
      <symbol> } </symbol>
    </ifStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
      <identifier> direction </identifier>
      <symbol> ) </symbol>
      <symbol> { </symbol>
      <doStatement>
        <keyword> do </keyword>
        <identifier> square </identifier>
        <symbol> . </symbol>
        <identifier> moveLeft </identifier>
        <symbol> ( </symbol>
        <symbol> ) </symbol>
        <symbol> ; </symbol>
      </doStatement>
      <symbol> } </symbol>
    </ifStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
      <identifier> direction </identifier>
      <symbol> ) </symbol>
      <symbol> { </symbol>
      <doStatement>
        <keyword> do </keyword>
        <identifier> square </identifier>
        <symbol> . </symbol>
        <identifier> moveRight </identifier>
        <symbol> ( </symbol>
        <symbol> ) </symbol>
        <symbol> ; </symbol>
      </doStatement>
      <symbol> } </symbol>
    </ifStatement>
    <doStatement>
      <keyword> do </keyword>
      <identifier> Sys </identifier>
      <symbol> . </symbol>
      <identifier> wait </identifier>
      <symbol> ( </symbol>
      <identifier> direction </identifier>
      <symbol> ) </symbol>
      <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
    <symbol> } </symbol>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> run </identifier>
    <symbol> ( </symbol>
    <symbol> ) </symbol>
    <symbol> { </symbol>
    <varDec>
      <keyword> var </keyword>
      <keyword> char </keyword>
      <identifier> key </identifier>
      <symbol> ; </symbol>
    </varDec>
    <varDec>
      <keyword> var </keyword>
      <keyword> boolean </keyword>
      <identifier> exit </identifier>
      <symbol> ; </symbol>
    </varDec>
    <letStatement>
      <keyword> let </keyword>
      <identifier> exit </identifier>
      <symbol> = </symbol>
      <identifier> key </identifier>
      <symbol> ; </symbol>
    </letStatement>
    <keyword> while </keyword>
    <symbol> ( </symbol>
    <identifier> exit </identifier>
    <symbol> ) </symbol>
    <symbol> { </symbol>
    <whileStatement>
      <keyword> while </keyword>
      <symbol> ( </symbol>
      <identifier> key </identifier>
      <symbol> ) </symbol>
      <symbol> { </symbol>
      <letStatement>
        <keyword> let </keyword>
        <identifier> key </identifier>
        <symbol> = </symbol>
        <identifier> key </identifier>
        <symbol> ; </symbol>
      </letStatement>
      <doStatement>
        <keyword> do </keyword>
        <identifier> moveSquare </identifier>
        <symbol> ( </symbol>
        <symbol> ) </symbol>
        <symbol> ; </symbol>
      </doStatement>
      <symbol> } </symbol>
    </whileStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
      <identifier> key </identifier>
      <symbol> ) </symbol>
      <symbol> { </symbol>
      <letStatement>
        <keyword> let </keyword>
        <identifier> exit </identifier>
        <symbol> = </symbol>
        <identifier> exit </identifier>
        <symbol> ; </symbol>
      </letStatement>
      <symbol> } </symbol>
    </ifStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
      <identifier> key </identifier>
      <symbol> ) </symbol>
      <symbol> { </symbol>
      <doStatement>
        <keyword> do </keyword>
        <identifier> square </identifier>
        <symbol> . </symbol>
        <identifier> decSize </identifier>
        <symbol> ( </symbol>
        <symbol> ) </symbol>
        <symbol> ; </symbol>
      </doStatement>
      <symbol> } </symbol>
    </ifStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
      <identifier> key </identifier>
      <symbol> ) </symbol>
      <symbol> { </symbol>
      <doStatement>
        <keyword> do </keyword>
        <identifier> square </identifier>
        <symbol> . </symbol>
        <identifier> incSize </identifier>
        <symbol> ( </symbol>
        <symbol> ) </symbol>
        <symbol> ; </symbol>
      </doStatement>
      <symbol> } </symbol>
    </ifStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
      <identifier> key </identifier>
      <symbol> ) </symbol>
      <symbol> { </symbol>
      <letStatement>
        <keyword> let </keyword>
        <identifier> direction </identifier>
        <symbol> = </symbol>
        <identifier> exit </identifier>
        <symbol> ; </symbol>
      </letStatement>
      <symbol> } </symbol>
    </ifStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
      <identifier> key </identifier>
      <symbol> ) </symbol>
      <symbol> { </symbol>
      <letStatement>
        <keyword> let </keyword>
        <identifier> direction </identifier>
        <symbol> = </symbol>
        <identifier> key </identifier>
        <symbol> ; </symbol>
      </letStatement>
      <symbol> } </symbol>
    </ifStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
      <identifier> key </identifier>
      <symbol> ) </symbol>
      <symbol> { </symbol>
      <letStatement>
        <keyword> let </keyword>
        <identifier> direction </identifier>
        <symbol> = </symbol>
        <identifier> square </identifier>
        <symbol> ; </symbol>
      </letStatement>
      <symbol> } </symbol>
    </ifStatement>
    <ifStatement>
      <keyword> if </keyword>
      <symbol> ( </symbol>
      <identifier> key </identifier>
      <symbol> ) </symbol>
      <symbol> { </symbol>
      <letStatement>
        <keyword> let </keyword>
        <identifier> direction </identifier>
        <symbol> = </symbol>
        <identifier> direction </identifier>
        <symbol> ; </symbol>
      </letStatement>
      <symbol> } </symbol>
    </ifStatement>
    <whileStatement>
      <keyword> while </keyword>
      <symbol> ( </symbol>
      <identifier> key </identifier>
      <symbol> ) </symbol>
      <symbol> { </symbol>
      <letStatement>
        <keyword> let </keyword>
        <identifier> key </identifier>
        <symbol> = </symbol>
        <identifier> key </identifier>
        <symbol> ; </symbol>
      </letStatement>
      <doStatement>
        <keyword> do </keyword>
        <identifier> moveSquare </identifier>
        <symbol> ( </symbol>
        <symbol> ) </symbol>
        <symbol> ; </symbol>
      </doStatement>
      <symbol> } </symbol>
    </whileStatement>
    <symbol> } </symbol>
    <returnStatement>
      <keyword> return </keyword>
      <symbol> ; </symbol>
    </returnStatement>
    <symbol> } </symbol>
  </subroutineDec>
  <symbol> } </symbol>
</class>
